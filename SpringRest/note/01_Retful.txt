01_Restful.txt

# Restful

 - URI만으로 어떤 자원인지 식별하고 요청 메서드(GET, POST, DELETE...)로
   해당 자원에 대한 어떤 요청인지를 구분하여 데이터를 응답하는 방식
 - 웹 브라우저는 Restful API에 요청을 보낸 후 응답으로 데이터만 받아서 
   해당 웹 페이지를 마저 완성하는 방식을 사용할 수 있다 (클라이언트 사이드 렌더링)
 - 응답으로 HTML코드가 아닌 데이터를 응답하기 때문에 웹 브라우저가 아닌
   다른 클라이언트 프로그램에서도 해당 데이터를 받아 활용할 수 있다
   
# URI와 요청 방식만으로 요청을 구분하는 예시

 - POST 방식으로 요청하면 해당 자원을 DB에 추가하라는 의미로 받아들인다
   ex) POST:/employee (새 사원을 추가하라는 뜻)
   
 - GET 방식으로 요청하면 해당 자원을 조회하겠다는 으미로 받아들인다
   ex) GET:/employee (사원 목록을 달라는 뜻)
       GET:/employee130 (130번 사원의 데이터를 달라는 뜻)
      
 - PUT 방식으로 요청하면 해당 자원을 수정하겠다는 의미로 받아들인다
   ex) PUT:/employee/130 (130번 사원의 데이터를 수정하겠다는 뜻)
   
 - DELETE 방식으로 요청하면 해당 자원을 삭제하겠다는 의미로 받아들인다
   ex) DELETE:/employee/130 (130번 사원을 삭제하겠다는 뜻)
   
# Spring에서 Restful API를 구현하기 위해 사용하는 어노테이션들

 - @RestController: 
 		해당 클래스가 일반 컨트롤러가 아닌 Restful API를 다루는 컨트롤러임을 표시
 - @ResponseBody: 
 		해당 컨트롤러 내부의 메서드가 뷰 페이지(.html)가 아닌 데이터를 응답하는 메서드임을 표시
 - @RequestBody: 
 		요청의 body에 파싱이 필요한 데이터가 실려있다는 것을 표시하는 어노테이션 (스피링이 파싱을 시도함)
 - @PathVariable: 요청 URI의 특정 부분을 활용할 수 있다
 

 
# RestController

 - 일반 컨트롤러와 다르게 내부 메서드들이 클라이언트에게 데이터를 응답한다
 - 어떤 데이터를 응답하는지 produces에 미디어 타입을 정의해주어야 한다
 - 미디어 타입들은 문자열로 직접 입력해도 되지만, MediaType 클래스에 정의된 상수를 사용해도 된다
 - 응답하는 데이터 타입을 자바빈 객체 타입으로 지정하고 
   produces를 application/json 또는 application/xml 형식으로 지정하면
   해당 데이터를 JSON형식 문자열 또는 XML형식 문자열로 변환하여 응답한다
   (XML 형식을 사용하기 위해서는 jackson-dataformat-xml 라이브러리를 추가 설치 해야한다)
 - RestponseEntity 클래스를 사용해 원하는 응답을 직접 생성하여 응답할 수도 있다
 - 응답 코드(status), 컨텐츠 타입, 응답 내용 등을 모두 직접 설정하여 응답할 수 있다