01_Spring FrameWork

# 프레임워크

 - 프로젝트 개발에 효율적인 구조를 미리 만들어 놓은 것
 - 개발자들은 이미 완성된 구조에 빈칸을 채우는 형식으로 개발을 진행하게 된다
 - 전체적인 구조에 신경을 덜 써도 되기 때문에 디자인 패턴을 제대로 이해하지 못한
   초보 개발자들도 프로젝트에 쉽게 투입할 수 있다
 - 일정 수준 이상의 품질이 항상 보장된다는 장점이 있다
 
# 스프링 프레임워크
 
 - Java, JSP를 활용해 웹 어플리케이션 서버를 더 효율적으로 진행하기 위해 개발되 프레임워크
 - Java, JSP를 더욱 객체지향적으로 활용하기 위한 다양한 디자인 패턴 및 기능들이 미리 구현되어 있다.
 - JSP관련 책의 예제에서 시작된 프레임워크이다
 
# 스프링 프레임워크에 적용되어 있는 여러 컨셉들

1. POJO (Plain Old Java Object)

 - JSP의 문법같은 복잡한 새로운 문법 사용을 지양해야 한다
 - 백엔드에는 절대 JSP 코드를 사용하지 않고 순수 Java만 사용해야 한다
 - 익숙치 않은 별도의 API 사용은 개발자의 혼란을 야기하므로 사용을 자체해야 한다
 
2. 의존성 주입 (DI, Dependency Injection)

 - 생성자는 프로젝트의 유지보수를 어렵게 만드는 장해 요인이다
 - 필요한 곳에 적절한 인스턴스를 외부에서 공급해줌으로써 생성자의 사용을 완전히 제거한다
 - 의존성 주입을 통해 프로젝트의 소스 코드 결합도를 낮출 수 있다
 	(결합도가 높은 상태 - 하나 수정하면 빨간줄 100개 뜨는 상태)

3. MVC 디자인 패턴

 - 하나의 프로젝트의 흐름을 구성하느 코드들을 크게 세 가지 종류로 분류하느 디자인 패턴
 - 프로젝트의 흐름을 구성하는 코드의 종류로는 Model, View, Controller가 있다
 - Model : 데이터를 담아서 활용하기 위한 종류의 코드들 (dto, vo)
 - View : 화면을 구성하기 위한 종류의 코드들 (jsp, thymeleaf, swing, ...)
 - Controller : 사용자가 원하는것에 대한 처리를 진행하기 위해 필요한 코드들
 				(처리라는 것은 굉장히 다양한 단계로 이루어져 있기 때문에 여러 단계로 나뉘어진다)
 				
4. 관점 지향형 프로그래밍 (AOP)

 - 특정 위치에서 반복해서 사용하는 코드가 있을 때 해당 코드를 모듈화 하여
   하나의 공통 관심사로 분리해두고 사용해야 한다라는 프로그래밍 방법론
 - 스프링에서는 관점 지향형 프로그래밍을 쉽게 적용할 수 있는 다양한 기능들을 제공한다
 
# 스프링 부트 프로젝트 구조 (Gradle)

 - src/main/java : 자바 코드를 보관하는 곳
 - src/main/resources : 프로젝트에 필요한 자원들을 보관하는 곳
	(다양한 라이브러리들이 기본적으로 이 경로를 참조하도록 설정되어 있음)
 - src/test/java : 작성한 자바 코드에 대한 테스트 코드를 작성하는 곳
 - Project and External Dependencies : 이 프로젝트가 현재 의존하고 있는 다른 프로젝트들
 - bin : 컴파일 결과물들이 보관되는 곳
 - gradle : gradle이 자동으로 관리하는 폴더
 - src : 실제 폴더의 모습을 볼 수 있는 곳
 - build.gradle : 프로젝트 이름, 버전, 의존성 등을 기록해두는 파일
   				  build.gradle 파일 내용을 수정하면 
   				  gradle이 프로젝트를 항상 이 파일의 형태대로 유지시켜 준다
 - gradle : gradle 관리 프로그램, 
 			이 프로그램의 다양한 명령어를 사용해 프로젝트를 관리할 수 있다
 			
# 생성한 프로젝트로 접속 확인해보기
	@Controller
	public class HomeController {
		@GetMapping("/home")
		public String index() {
			return "index";
		}		
	}
	
@Controller - 이 클래스가 MVC에서 Controller 역할을 하는 클래스임을 스프링에게 알린다.
				알려주면 스프링이 이 클래스를 알아서 가져다 쓴다.
				
@GetMapping("uri") : 해당 URI에 GET방식으로 요청하는 요청들을 이 메서드로 매핑한다

return "index" : 알아서 src/main/resources/templates 경로의 index.html을 찾아간다
				 (의존성에 thymeleaf가 있기 때문에 이렇게 동작한다)