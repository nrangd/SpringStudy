# Mybatis

 - DB와 연결하는데 필요한 모든 jdbc 코드들을 자동으로 생성해주는 프레임워크
 - XML파일에 설정만 해두면 필요한 코드는 모두 알아서 자동으로 생성된다
 - 기본적으로 HikariCP라는 커넥션 풀 라이브러리를 사용해 여러개의 연결을 미리 생성해두고 사용한다
 
# Mybatis 설정하기
 
 (1) datasource 설정
 
  - 커넥션 풀에서 데이터베이스와 연결을 맺어두는 객체를 datasource라고 부른다
  - 즉 여러개 생성해야하는 연결들 중 하나에 대한 설정을 의미한다
  
  spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
  spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE
  spring.datasource.username=hr
  spring.datasource.password=1234
  
 (2) hikariCP에 대한 설정
 
  - 커넥션 풀에 대한 스펙을 정의해둔다
  - 프로젝트 규모에 맞는 설정을 통해 성능을 최적화 할 수 있다
  - 자세한 설정들은 https://github.com/brettwooldridge/HikariCP에 있다
  
  spring.datasource.hikari.maximum-pool-size=20
  spring.datasource.hikari.minimum-idle=5
  spring.datasource.hikari.idle-timeout=3600
 
 (3) mybatis 설정 파일의 위치에 대한 설정
 
  - mybatis가 가져다 사용해야하는 xml 파일들의 위치를 지정해둔다
  
    mybatis.config-location=classpath:mybatis-config.xml
    
    	<?xml version="1.0" encoding="UTF-8" ?>
		<!DOCTYPE configuration
		  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
		  "https://mybatis.org/dtd/mybatis-3-config.dtd">
		<configuration>
		  <typeAliases>
		  	<typeAlias type="com.kd.springdatabase.dto.Employee" alias="emp" />
		  	<typeAlias type="com.kd.springdatabase.dto.Cloth" alias="clt" />
		  </typeAliases>
		</configuration>
    
    mybatis.mapper-locations=classpath:mapper/**/*.xml
    

# Mybatis Mapper에 사용하는 태그들

 - mapper.xml 파일에 다음 태그들을 사용해 쿼리문의 형식을 지정해둔 후
   org.mybatis.spring.SqlSessionTemplate 인스턴스를 주입받아 원하는 쿼리문을 호출해 사용한다

 - parameterType 속성
 
  + 쿼리문에 사용될 ?들을 채우기 위해 값을 전달받을 때 해당 값들의 타입을 정의해두는 곳
  + 해당 타입을 미리 정의해두면 편리하게 바인딩되어 쉽게 사용할 수 있다
  + 주로 DTO타입을 전달받아 java.util.HashMap으로 변환하거나 DTO타입으로 그대로 사용해 sql의 ?들을 채울 수 있다
  + 쿼리문에서 파라미터로 전달받은 값을 활용할 때는 #{}를 사용한다

 - resultType 속성
 
  + 쿼리문의 실행 결과가 어떤 타입인지 정의해두는 곳이다
  + select문의 실행 결과를 담아 줄 수 있는 DTO를 정의해두면 알아서 해당 DTO에 값을 채워준다
 
 - <select> : 
   + 매퍼에 select문을 정의해두기 위해 사용한다
   + 단일 행이 조회되는 쿼리문은 selectOne()을 사용해 호출해야 하고
   + 다중 행이 조회되는 쿼리문은 selectList()를 사용해 호출해야 한다
 
 - <insert>, <selectKey>
   + 매퍼에 insert문을 정의해두기 위해 사용한다
   + selectKey를 사용하면 방금 추가한 행이 DB로부터 부여받은 기본키 값을 받아올 수 있다
   + SqlSessionTemplate의 insert()를 통해 호출해야 한다
   + 호출시 원하는 값을 전달할 때 전달한 DTO객체를 java.util.HashMap 또는 해당 DTO타입으로 받을 수 있다
   
 - <update>
 
  + 매퍼에 update문을 정의해두기 위해 사용한다
 
 - <delete>
  
  + 매퍼에 delete문을 정의해두기 위해 사용한다
  
# 동적 쿼리문 (Dynamic SQL)

 - 마이바티스에서 if, for등 다양한 제어문, 반복문들을 활용하여 쿼리문을 작성할 수 있도록 제공해주는 기능
 - https://mybatis.org/mybatis-3/dynamic-sql.html